---
AWSTemplateFormatVersion: '2010-09-09'
Description: Creates the application load balancer.

Parameters:
  # Shared Params
  AppName:
    Type: String
    Description: The name of the application
    AllowedPattern: '[A-Za-z0-9]+'
    ConstraintDescription: must be alphanumeric
  BuildNumber:
    Type: String
    Description: The build version number. Should increment each time the stack is
      updated.
    AllowedPattern: \d+
    ConstraintDescription: must be an integer
    Default: 1
  Environment:
    Type: String
    Description: The type of environment you are deploying.
    ConstraintDescription: must be one of production, or staging
    Default: staging
    AllowedValues: [production, staging]

  # Params from other stacks
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to put this in.
  PublicTierSubnet1a:
    Type: AWS::EC2::Subnet::Id
    Description: The public tier subnet in AZ 1a
  PublicTierSubnet1b:
    Type: AWS::EC2::Subnet::Id
    Description: The public tier subnet in AZ 1b
  WebLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The Public Tier load balancer security group ID

  # Custom Parameters
  LoadBalancerIpAddressType:
    Type: String
    Description: The type of IP address to use for the application load balancer.
      Dual stack means it allows both IPv4 and IPv6.
    ConstraintDescription: must be one of ipv4 or dualstack
    AllowedValues: [ipv4, dualstack]
    Default: ipv4
  AllowHTTP:
    Type: String
    AllowedValues: ['yes', 'no']
    Default: 'no'
  SSLCertificateARN:
    Type: String
    Description: The SSL Certificate ARN

Conditions:
  IsProduction: !Equals [!Ref Environment, 'production']
  ShouldEnableHTTP: !Equals [!Ref AllowHTTP, 'yes']
  ShouldEnableHTTPS: !Not [!Equals [!Ref SSLCertificateARN, '']]

Resources:
  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Metadata:
      BuildNumber: !Ref BuildNumber
    Properties:
      Name: !Sub "${AppName}-WEB-LB-${Environment}"
      IpAddressType: !Ref LoadBalancerIpAddressType
      Scheme: internet-facing
      SecurityGroups:
        - !Ref WebLoadBalancerSG
      Subnets:
        - !Ref PublicTierSubnet1a
        - !Ref PublicTierSubnet1b
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-WebLoadBalancer-${Environment}"
  WebLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Metadata:
      BuildNumber: !Ref BuildNumber
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
      Name: !Sub "${AppName}-WebTG-${Environment}"
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 3600
      VpcId: !Ref VPC
  WebLoadBalancerHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Metadata:
      BuildNumber: !Ref BuildNumber
    Properties:
      DefaultActions:
        - !If
            - ShouldEnableHTTP
            - Type: forward
              TargetGroupArn: !Ref WebLoadBalancerTargetGroup
            - Type: redirect
              RedirectConfig:
                Protocol: HTTPS
                Port: 443
                StatusCode: HTTP_301
      LoadBalancerArn: !Ref WebLoadBalancer
      Port: 80
      Protocol: HTTP
  WebLoadBalancerHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Metadata:
      BuildNumber: !Ref BuildNumber
    Condition: ShouldEnableHTTPS
    Properties:
      Certificates:
        - CertificateArn: !Ref SSLCertificateARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebLoadBalancerTargetGroup
      LoadBalancerArn: !Ref WebLoadBalancer
      Port: 443
      Protocol: HTTPS

Outputs:
  WebLoadBalancer:
    Value: !Ref WebLoadBalancer
    Description: The Web Load Balancer ID
  WebLoadBalancerEndpoint:
    Value: !GetAtt WebLoadBalancer.DNSName
    Description: The endpoint for the Web Load Balancer instance
  WebLoadBalancerTargetGroup:
    Value: !Ref WebLoadBalancerTargetGroup
    Description: The Web Load Balancer target group ARN.